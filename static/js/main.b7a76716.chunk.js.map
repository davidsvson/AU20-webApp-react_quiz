{"version":3,"sources":["logo.svg","components/Game.jsx","components/Welcome.jsx","components/Result.jsx","App.js","reportWebVitals.js","index.js"],"names":["Game","answeredCorrectly","showResult","questions","question","answers","correct","useState","currentQuestion","setQuerrentQuestion","selectedAnswer","setSelectedAnswer","decided","setDecided","q","options","map","answer","index","className","type","name","disabled","onClick","length","setTimeout","Welcome","nextScreen","Result","score","restartQuiz","App","WELCOME","GAME","setScore","currentScreen","setCurrentScreen","content","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gMAAe,I,YC8FAA,MA1FF,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,kBAAmBC,EAAiB,EAAjBA,WACzBC,EA4DC,CACH,CACIC,SAAU,6BACVC,QAAS,CAAC,SAAU,SAAU,SAC9BC,QAAS,GAEb,CACIF,SAAU,gCACVC,QAAS,CAAC,OAAQ,QAAS,UAC3BC,QAAS,GAEb,CACIF,SAAU,8BACVC,QAAS,CAAC,UAAW,UAAW,WAChCC,QAAS,GAEb,CACIF,SAAU,4CACVC,QAAS,CAAC,IAAK,IAAK,KACpBC,QAAS,GAEb,CACIF,SAAU,qBACVC,QAAS,CAAC,QAAS,UAAW,SAC9BC,QAAS,IArF+B,EAEAC,mBAAS,GAFT,mBAEzCC,EAFyC,KAExBC,EAFwB,OAGJF,mBAAS,MAHL,mBAGzCG,EAHyC,KAGzBC,EAHyB,OAIlBJ,oBAAS,GAJS,mBAIzCK,EAJyC,KAIhCC,EAJgC,KAM1CC,EAAIX,EAAUK,EAAkB,GA4BhCO,EAAUD,EAAET,QAAQW,KAAI,SAACC,EAAQC,GAAT,OAC1B,mBAAGC,UAAW,UAAaP,GAAWM,IAAUJ,EAAER,QAAW,WAAa,IAA1E,SACI,kCACI,uBAAOc,KAAK,QAASC,KAAK,WAAWC,SAAUV,EAC3CW,QAAS,kBAAMZ,EAAkBO,MACpCD,MAJ4EA,MASzF,OACI,0BAASE,UAAU,OAAnB,UACI,2CAAcX,EAAd,OAAmCL,EAAUqB,OAA7C,OACA,6BAAKV,EAAEV,WACNW,EAED,wBAAQO,SAAUV,EAASW,QA1Cb,WAClBV,GAAW,GACPH,IAAmBI,EAAER,SACrBL,IAEJwB,YAAW,WACHjB,IAAoBL,EAAUqB,OAC9BtB,KAEAO,EAAoBD,EAAkB,GACtCG,EAAkB,MAClBE,GAAW,MAEhB,MA6BC,wBC7CGa,EARC,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAH,OACZ,oCACI,+DACA,2DACA,wBAAQJ,QAAUI,EAAlB,qBCIOC,EARA,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,YAAV,OACX,oCACI,yCACA,yCAAYD,EAAZ,qBACA,4BAAG,wBAAQN,QAAUO,EAAlB,iCC2CIC,MAzCf,WACE,IAAMC,EAAU,UAAWC,EAAO,OADrB,EAEa1B,mBAAS,GAFtB,mBAENsB,EAFM,KAECK,EAFD,OAG6B3B,mBAASyB,GAHtC,mBAGNG,EAHM,KAGSC,EAHT,KAUTC,EAAU,KACd,OAAOF,GACL,KAAKH,EACHK,EAAU,cAAC,EAAD,CACRV,WAAY,kBAAMS,EAAiBH,MACrC,MACF,KAAKA,EACHI,EAAU,cAAC,EAAD,CACNpC,kBAAmB,kBAAMiC,EAASL,EAAQ,IAC1C3B,WAAY,kBAAMkC,EAlByB,aAoB/C,MACF,QACEC,EAAU,cAAC,EAAD,CAAQR,MAAQA,EAAOC,YAlBjB,WAClBM,EAAiBH,GACjBC,EAAS,MAmBX,OAEE,sBAAKf,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACI,wCAEJ,iCACGkB,EADH,UAEUR,SC7BDS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.b7a76716.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { useState } from \"react\";\r\n\r\n\r\n\r\nconst Game = ({ answeredCorrectly, showResult }) => {\r\n    const questions = getQuestions();\r\n    const [currentQuestion, setQuerrentQuestion ] = useState(1)\r\n    const [selectedAnswer, setSelectedAnswer] = useState(null);\r\n    const [decided, setDecided] = useState(false);\r\n\r\n    const q = questions[currentQuestion - 1 ];\r\n\r\n    const handleDecided = () => {\r\n        setDecided(true);\r\n        if( selectedAnswer === q.correct) {\r\n            answeredCorrectly(); // report score back to App\r\n        }\r\n        setTimeout(() => {      \r\n            if( currentQuestion === questions.length) {\r\n                showResult();\r\n            } else {\r\n                setQuerrentQuestion(currentQuestion + 1);\r\n                setSelectedAnswer(null);\r\n                setDecided(false);\r\n            }\r\n        }, 2000);\r\n    }\r\n\r\n    //let b = true;\r\n    //let a = b ? 'hej' : 'då'; om b är true så blir a= 'hej' annars blir a='då'\r\n\r\n\r\n    // map på en lista\r\n    // const list = [1, 5, 7, 4];\r\n    // const elements = list.map(item => <li key={item}> {item} </li>);\r\n    // return (<ul> {elements} </ul>);\r\n\r\n\r\n    const options = q.answers.map((answer, index) => (\r\n        <p className={\"option\" + ((decided && index === q.correct) ? ' correct' : '')}  key={answer}>\r\n            <label>\r\n                <input type=\"radio\"  name=\"question\" disabled={decided}\r\n                    onClick={() => setSelectedAnswer(index)} />\r\n                {answer}\r\n            </label>\r\n        </p>\r\n    ))\r\n\r\n    return (\r\n        <section className=\"game\">\r\n            <h2>Question {currentQuestion} of {questions.length} </h2>\r\n            <h3>{q.question}</h3>\r\n            {options}\r\n            \r\n            <button disabled={decided} onClick={handleDecided}>Answer</button>\r\n        </section>\r\n    )\r\n\r\n}\r\n\r\n// <p className=\"option\"><label><input type=\"radio\" /> 24 maj </label> </p>\r\n// <p className=\"option\"><label><input type=\"radio\" /> 24 dec </label> </p>\r\n//<p className=\"option\"><label><input type=\"radio\" /> 3 nov </label> </p>\r\n\r\nfunction getQuestions() {\r\n    return [\r\n        {\r\n            question: 'När är det julafton?',\r\n            answers: ['24 maj', '24 dec', '3 nov'],\r\n            correct: 1\r\n        },\r\n        {\r\n            question: 'Vad heter David i mellannamn?',\r\n            answers: ['sven', 'julia', 'anders'],\r\n            correct: 2\r\n        },\r\n        {\r\n            question: 'Vad har vit för hex tal?',\r\n            answers: ['#000000', '#ffffff', '#15f36a'],\r\n            correct: 1\r\n        },\r\n        {\r\n            question: 'vad sitter bredvid t på tangentbordet?',\r\n            answers: ['y', 'b', 'n'],\r\n            correct: 0\r\n        },\r\n        {\r\n            question: 'vad är bäst?',\r\n            answers: ['teams', 'discord', 'slack'],\r\n            correct: 1\r\n        }\r\n    ]\r\n}\r\n\r\nexport default Game;","\r\nconst Welcome = ({ nextScreen }) => (\r\n    <section>\r\n        <h2>Välkommen till denna Quiz!</h2>\r\n        <p>Vill du sätta igång?</p>\r\n        <button onClick= {nextScreen}>Ja!</button>\r\n    </section>\r\n)\r\n\r\nexport default Welcome;","\r\nconst Result = ({ score, restartQuiz }) => (\r\n    <section>\r\n        <h2>Reultat</h2>\r\n        <p>Du fick {score} rätta svar!</p>\r\n        <p><button onClick={ restartQuiz}> Börja om </button></p>\r\n    </section>    \r\n)\r\n\r\nexport default Result;","import logo from './logo.svg';\r\nimport './App.css';\r\nimport { useState } from 'react';\r\nimport Game from './components/Game';\r\nimport Welcome from './components/Welcome';\r\nimport Result from './components/Result';\r\n\r\nfunction App() {\r\n  const WELCOME = 'welcome', GAME = 'game', RESULT = 'result';\r\n  const [score, setScore] = useState(0);\r\n  const [currentScreen, setCurrentScreen] = useState(WELCOME);\r\n\r\n  const restartQuiz = () => {\r\n    setCurrentScreen(GAME);\r\n    setScore(0);\r\n  }\r\n\r\n  let content = null;\r\n  switch(currentScreen) {\r\n    case WELCOME:\r\n      content = <Welcome\r\n        nextScreen={() => setCurrentScreen(GAME)} />\r\n      break;\r\n    case GAME: \r\n      content = <Game \r\n          answeredCorrectly={() => setScore(score + 1)}\r\n          showResult={() => setCurrentScreen(RESULT)}\r\n      />\r\n      break;\r\n    default:\r\n      content = <Result score= {score} restartQuiz={restartQuiz}  />;\r\n  }\r\n\r\n  return (\r\n    \r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n          <h1>Quiz</h1>\r\n      </header>\r\n      <main>\r\n        {content}       \r\n        Score: {score}\r\n      </main>\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}